apply plugin: "com.android.application"

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

import com.android.build.OutputFile
import groovy.json.JsonSlurper

apply from: "../keystores/debug.keystore.gradle"

def appCfgSlurper = new JsonSlurper()
def appCfg = appCfgSlurper.parse project.rootProject.file('../app_cfg.json')
def appVersionName = appCfg.app_version_name
def appVersionCode = appCfg.android_version_code

Properties localProperties = new Properties()
localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
def ignoreArmForDebug = localProperties.getProperty("ignore_arm_debug")
def appVersionSuffix = localProperties.getProperty("app_version_suffix")
if (appVersionSuffix == null)
    appVersionSuffix = appCfg.app_version_suffix
if (!appCfg.android_sign)
    appVersionSuffix = ""

def targetsdkversion = 30
def minsdkversion = 21

project.ext.react = [
    entryFile: "index.js",
    enableHermes: false,  // clean and rebuild if changing
    inputExcludes: ["android/**", "ios/**", "public/**", ".local/**"]
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for in debug.
 */
def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    // aaptOptions {
    //     noCompress "tflite"
    // }

    defaultConfig {
        // configurations.all {
        //     resolutionStrategy { force 'androidx.core:core:1.6.0' }
        // }
        applicationId appCfg.application_id
        minSdkVersion minsdkversion
        targetSdkVersion targetsdkversion
        versionCode appVersionCode
        versionName appVersionName
        manifestPlaceholders = [
            minsdkversion: minsdkversion,
            targetsdkversion: targetsdkversion
        ]
        ndkVersion = "21.4.7075529"
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a" // "armeabi-v7a", "x86", "arm64-v8a"
        }
    }
    signingConfigs {
        release {
            storeFile file(project.RELEASE_STORE_FILE)
            storePassword project.RELEASE_STORE_PASSWORD
            keyAlias project.RELEASE_KEY_ALIAS
            keyPassword project.RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            versionNameSuffix appVersionSuffix
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
            signingConfig appCfg.android_sign ? signingConfigs.release : null
        }
        debug {
            versionNameSuffix "-debug"
            if (nativeArchitectures) {
                ndk {
                    abiFilters nativeArchitectures.split(',')
                }
            }
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "arm64-v8a": 2, "x86":3]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1000000 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation ("androidx.browser:browser:1.3.0"){
        force = true
    }
    
    implementation project(':react-native-bluetooth-headset-detect')
    implementation project(':react-native-incall-manager')
    implementation project(':react-native-webview')
    implementation project(':react-native-ssl-pinning')
    implementation project(':react-native-permissions')
    implementation project(':react-native-image-base64')
    implementation project(':lottie-react-native')

    // api "com.google.firebase:firebase-ml-vision:<latest_version>"
    // implementation "com.google.firebase:firebase-ml-vision-automl:<latest_version>"
    // implementation "com.google.firebase:firebase-ml-model-interpreter:<latest_version>"

    // implementation 'com.google.firebase:firebase-core:16.0.6'
    // implementation 'com.google.firebase:firebase-messaging:17.3.4'

    // implementation 'com.github.Desintegrator:nsfw-detector-android-test:2.0.0'

    // implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.21"

    implementation "com.facebook.android:facebook-android-sdk:[5,6)"
    implementation project(':react-native-community_netinfo')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-device-info')
    implementation project(':react-native-localize')
    implementation project(':react-native-webrtc')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha03'
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation 'com.google.firebase:firebase-analytics:17.4.3'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'

    // For in-app review's support
    implementation 'com.google.android.play:core:1.8.0'

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation 'com.yandex.android:mobmetricalib:3.15.0'
    implementation 'com.facebook.android:audience-network-sdk:6.+'

    implementation 'com.android.installreferrer:installreferrer:1.1.2'
    implementation 'androidx.multidex:multidex:2.0.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
